package concurrency_pattern

/*
	同步原语以及它们所解决问题

	Mutex: 解决共享变量或者临界区的并发访问问题.
	RWMutex: 解决在多读写少的场景下互斥锁的并发性能问题
	WaitGroup: 解决等待一组子任务完成的问题
	Cond: 解决条件满足后通知的问题,单个通知或者全部通知
	Once: 解决单次初始化的问题
	sync.Map: 实现线程安全(goroutine并发访问安全)的map对象
	Pool: 池化对象,重用对象,如果对象的创建和销毁太耗资源,那么使用池化对象技术可以很好地解决问题.
	Context: 提供上下文传递、撤销以及超时的功能,控制子goroutine
	atomic: 对象的原子操作
	channel: 多种模式
		- 信息交流
		- 数据传递
		- 信号通知(或广播)
		- 任务编排(Or-Done模式、扇入模式、扇出模式、Stream模式、管道模式、map-reduce模式等)
		- 互斥锁
	信号量: 对n个资源的同步保护
	SingleFlight: 对同一个资源并发访问的控制(合并请求)
	CyclicBarrier: 在循环屏障的使用场景中,参与者需要相互等待.单个屏障可以使用WaitGroup 或者 channel 实现
	分组操作: 解决处理一组任务时的同步问题
	限流: 解决单个进程或者分布式调用的限流问题, 一般漏桶或令牌算法实现
	分布式同步原语: 主要介绍基于etcd实现的同步原语,包括选举、锁、队列、屏障、STM等


	保证服务的质量,要求我们在设计程序时需要满足

	- 对并发对象的方法调用不应该阻塞完整的处理流程
	- 同步访问并发对象应该设计简单
	- 应用程序应该透明地使用软硬件的并发能力
*/